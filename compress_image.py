# -*- coding: utf-8 -*-
"""Compress Image.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1II4c2QSVcR3An_AEgmGUFHrY9Bgj2aI0
"""

import os
from PIL import Image
from io import BytesIO

def compress_image(input_path, output_path, target_size, tolerance=0.05):
    """
    Kompres gambar ke ukuran target dengan toleransi tertentu

    Parameter:
    input_path (str): Path gambar input
    output_path (str): Path output untuk gambar terkompresi
    target_size (int): Ukuran target dalam bytes
    tolerance (float): Toleransi persentase ukuran (default: 5%)
    """
    # Validasi input
    if target_size <= 0:
        raise ValueError("Ukuran target harus lebih besar dari 0")

    # Buka gambar
    with Image.open(input_path) as img:
        format = img.format.upper()
        original_size = os.path.getsize(input_path)

        # Jika ukuran asli sudah lebih kecil dari target
        if original_size <= target_size:
            img.save(output_path, format=format)
            print("Gambar sudah lebih kecil dari ukuran target")
            return

        # Kompresi untuk format berbeda
        if format == 'JPEG':
            compress_jpeg(img, output_path, target_size, tolerance)
        elif format == 'PNG':
            compress_png(img, output_path, target_size, tolerance)
        else:
            raise ValueError("Format gambar tidak didukung")

def compress_jpeg(img, output_path, target_size, tolerance):
    low = 1
    high = 95
    best_quality = None
    best_size = float('inf')

    # Binary search untuk kualitas optimal
    for _ in range(20):  # Batasi iterasi
        if low > high:
            break

        mid = (low + high) // 2
        buffer = BytesIO()
        img.save(buffer, format='JPEG', quality=mid, optimize=True)
        current_size = buffer.tell()

        if current_size <= target_size:
            if current_size < best_size:
                best_size = current_size
                best_quality = mid
            low = mid + 1
        else:
            high = mid - 1

    if best_quality is None:
        raise RuntimeError("Tidak bisa mencapai ukuran target bahkan dengan kualitas terendah")

    # Cek toleransi
    lower_bound = target_size * (1 - tolerance)
    if best_size < lower_bound:
        print(f"Peringatan: Ukuran hasil kompresi ({best_size} bytes) lebih kecil {tolerance*100}% dari target")

    # Simpan gambar terkompresi
    img.save(output_path, format='JPEG', quality=best_quality, optimize=True)
    print(f"Kompresi JPEG berhasil. Kualitas: {best_quality}, Ukuran: {best_size} bytes")

def compress_png(img, output_path, target_size, tolerance):
    buffer = BytesIO()
    img.save(buffer, format='PNG', compress_level=9, optimize=True)
    compressed_size = buffer.tell()

    if compressed_size > target_size:
        raise RuntimeError(f"Tidak bisa mencapai ukuran target. Ukuran minimum PNG: {compressed_size} bytes")

    # Simpan gambar terkompresi
    img.save(output_path, format='PNG', compress_level=9, optimize=True)
    print(f"Kompresi PNG berhasil. Ukuran: {compressed_size} bytes")

# Contoh penggunaan
if __name__ == "__main__":
    input_path = "Umroh Backpacker Super Hemat 9D Keb April (Depan Belakang) copy.jpg" 
    compress_image(
        input_path=input_path,
        output_path=input_path.split(".")[0] + "_compressed.jpg",
        target_size=10000000,  # 10000 KB
    )
